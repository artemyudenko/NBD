1. MATCH (hugo:Person {name: "Hugo Weaving"})-[:ACTED_IN]->(hugoWeavingMovies) RETURN hugo,hugoWeavingMovies
2. MATCH (hugo:Person {name:"Hugo Weaving"})-[:ACTED_IN]->(m)<-[:DIRECTED]-(directors) RETURN directors
3. MATCH (hugo:Person {name:"Hugo Weaving"})-[:ACTED_IN]->(m)<-[:ACTED_IN]-(coActors) RETURN coActors
4. MATCH (people:Person)-[:ACTED_IN]-(movie:Movie) WITH people, count(movie) AS movie_count  WHERE movie_count > 0  RETURN people, movie_count
5. MATCH (p:Person)-[:WROTE|:DIRECTED]-(m:Movie) RETURN p, m.title
6. MATCH (hugo {name: "Hugo Weaving"})-[:ACTED_IN]->(m:Movie)<-[:ACTED_IN]-(kiany {name: "Keanu Reeves"}) RETURN m
7. 
CREATE (CaptainAmericaTheFirstAvenger:Movie {title:'Captain America: The First Avenger', released:2011, tagline:'blablabla'})
CREATE (JoeJohnston:Person {name: 'Joe Johnston', born:1950})
CREATE (ChristopherMarkus:Person {name: 'Christopher Markus', born:1970})
CREATE (ChrisEvans:Person {name: 'Chris Evans', born:1981})
CREATE (StMcFeely:Person {name: 'Stephen McFeely', born:1970})
CREATE (Hugo:Person {name:'Hugo Weaving', born:1960})

CREATE
(JoeJohnston)-[:DIRECTED]->(CaptainAmericaTheFirstAvenger), 
(ChristopherMarkus)-[:WROTE]->(CaptainAmericaTheFirstAvenger),
(ChrisEvans)-[:ACTED_IN {roles:['Captain America']}]->(CaptainAmericaTheFirstAvenger),
(StMcFeely)-[:WROTE]->(CaptainAmericaTheFirstAvenger),
(Hugo)-[:ACTED_IN {roles:['Red scale']}]->(CaptainAmericaTheFirstAvenger)

8.
MATCH p=(a)-[r*]->(b)
WHERE a.name = 'Darjeeling'
AND b.name = 'Sandakphu'
RETURN p AS route

9.
MATCH p=shortestPath((a:town{name:'Darjeeling'})-[r*]->(b:peak{name:'Sandakphu'}))
RETURN p AS route

10.
MATCH (darjeeling { name: 'Darjeeling' }),(sandakphu { name: 'Sandakphu' }), 
    paths = allShortestPaths((darjeeling)-[*]-(sandakphu))
WHERE ALL (p IN relationships(paths) WHERE p.winter = "true")
RETURN paths
11.
MATCH p=((a)-[r*]->(b))
WHERE a.name = 'Darjeeling'
AND b.name = 'Sandakphu'
WITH p,relationships(p) AS r, length(relationships(p)) AS count
ORDER BY count
RETURN p AS route
12.
MATCH (p:town{name:'Darjeeling'})-[r:twowheeler*{summer:'true'}]-(t) RETURN DISTINCT(r)
13.
MATCH (p:town{name:'Darjeeling'})-[r:twowheeler*{summer:'true'}]-(t) RETURN t
14.
MATCH (a)<-[:ORIGIN]-(f:Flight)
WITH a.name AS Airport, f.airline AS Airline, count(f) AS total
ORDER BY total, Airport, Airline DESC
RETURN Airport, Airline, total
15.
MATCH path = (origin:Airport { name:"LAX" })<-[r:ORIGIN|DESTINATION*..2]->(destination:Airport)
WHERE ALL(f IN [n IN NODES(path) WHERE 'Flight' IN LABELS(n)]
  WHERE [(f)<-[:ASSIGN]-(ticket) | ticket.price < 3000][0])
RETURN path
16.
MATCH (f:Flight)-[:ORIGIN]-(a:Airport { name:'LAX' })
WITH f
MATCH (t:Ticket)-[:ASSIGN]-(f)-[r:ORIGIN|DESTINATION*..5]-(d:Airport{name:'DAY'})
RETURN d.name, t.price,  f.airline
ORDER BY t.price
17.
MATCH (f:Flight)-[:ORIGIN]-(a:Airport { name:'LAX' })
WITH f
MATCH (t:Ticket)-[:ASSIGN]-(f)-[r:ORIGIN|DESTINATION*..5]-(d:Airport{name:'DAY'})
RETURN d.name, t.price,  f.airline
ORDER BY t.price ASC
LIMIT 1
18.
MATCH (f:Flight)-[:ORIGIN]-(a:Airport { name:'LAX' })
WITH f
MATCH (t:Ticket { class:'business' })-[:ASSIGN]-(f)-[r:ORIGIN|DESTINATION*..5]-(d:Airport{name:'DAY'})
RETURN d.name, t.price,  f.airline
ORDER BY t.price ASC
LIMIT 1
19.
MATCH (a)<-[:DESTINATION|ORIGIN]-(f:Flight)-[:ASSIGN]-(t:Ticket)
WITH a.name AS Airport, f.airline AS Airline
ORDER BY Airport
RETURN DISTINCT(Airport), Airline
20.
MATCH (f:Flight)-[:ORIGIN]-(a:Airport)
WITH f
MATCH (t:Ticket)-[:ASSIGN]-(f)-[r:ORIGIN|DESTINATION*..1]-(d:Airport)
RETURN d.name, t.price,  f.airline
ORDER BY t.price ASC
LIMIT 1